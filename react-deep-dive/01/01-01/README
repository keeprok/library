- page : 20p - 34p
1. 데이터 타입 
    1. 원시 타입(객체타입이 아닌 모든 타입) ES2022 - 7개
        1. null : type of null === object  - 초창기 문제 이긴 한데 수정시 호환성이 깨지는 변경사항 이라 수정 불가
        2. Boolean 형의 값 외에도 조건문에서 truthy , falsy 같은 값들이 존재한다 
        3. Number : 2진수,8진수 같이 별도의 타입을 제공하지않고 모두 10진수로 해석되어 동일한 값으로 표시 된다 
        4. BigInt : number에서 다룰수 있는 숫자크기의 제한을 극복하기 위해 나온 개념
        5. String :  문자열이 원시타입이며 변경 불가능하다 
        6. Symbol : ES6이후 생긴 7번째 타입으로 고유한 값을 만들기 위해 사용되고 symbol()즉 심벌 함수를 이용해야만 한다 
    
    1. 객체 타입
        1. 7가지 원시 타입을 제외한 모든것 (배열 ,함수,정규식,클래식)
2. 값을 저장하는 방식의 차이 
    1. 원시 타입
        1. 불변의 형태의 값으로 저장 
    2. 객체 타입
        1. 참조를 저장 (변경명의 주소 또한 저장)
3. 또 다른 비교 공식, Object.is
    1. 예외 방식으로 == 와 === 가 만족하지 못하는 특이 케이스를 위해  Object.is가 나름의 알고리즘으로 작동하는데 객체 비교에서는 별차이가 없다 (자바 스크립트의 특징으로 인해 === 와 Object.is가 동일하게 작동함)
    2. Object.is가 좀더 개발자가 기대하는 방식으로 정확히 비교함
4. 리엑트에서의 동등 비교 
    1. 리엑트에서는 == 와 === 가아닌 Object.is 가 사용된다 
    2. objectis 를 기반으로 동등 비교하는 shallowEqual이라는 함수를 만들어 사용한다 
    3. 객체의 얕은 복사까지만 구현가능하다 (비교 가능하다)

## 결과

- 훅의 의존성 뱅열의 비교
- useMemo와 useCallback의 필요성
- 랜더링 최적화를 위해서 꼭 필요한 React.memo